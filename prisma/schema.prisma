// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SERVICE
}

enum ApiKeyScope {
  READ_ONLY
  WRITE_ONLY
  ADMIN
}

enum ActionType {
  UPLOAD_FILE
  GENERATE_REPORT
  EXPORT_REPORT
  API_KEY_ACTION
  LIST_FILES
  CREDIT_PURCHASE
  CREDIT_ADMIN_ADD
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String?  // Optional for OAuth users
  name          String
  role          UserRole @default(USER)
  credits       Int      @default(50)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  
  // OAuth fields
  googleId      String?  @unique
  githubId      String?  @unique
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  refreshTokens RefreshToken[]
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  files         File[]
  reports       Report[]
  payments      Payment[]
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model ApiKey {
  id          String       @id @default(uuid())
  key         String       @unique
  name        String
  scope       ApiKeyScope
  userId      String
  isActive    Boolean      @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model AuditLog {
  id          String     @id @default(uuid())
  userId      String
  action      ActionType
  cost        Int
  creditsAfter Int
  txHash      String?    // Blockchain transaction hash
  metadata    Json?      // Additional action-specific data
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

model File {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  s3Key       String   @unique
  s3Url       String
  userId      String
  uploadedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("files")
}

model Report {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileId      String?  // Optional: linked to a file
  s3Key       String?  // Report file in S3
  s3Url       String?
  metadata    Json?
  userId      String
  generatedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  amount        Float    // Amount in USD
  currency      String   @default("USD")
  credits       Int      // Credits purchased
  provider      String   // stripe, razorpay
  transactionId String   @unique
  status        String   // pending, completed, failed
  metadata      Json?
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model BlockchainTransaction {
  id        String   @id @default(uuid())
  txHash    String   @unique
  fromAddr  String
  toAddr    String
  amount    String   // Wei amount as string
  credits   Int      // Credits this transaction represents
  userId    String
  status    String   // pending, confirmed, failed
  blockNumber Int?
  gasUsed   String?
  createdAt DateTime @default(now())
  confirmedAt DateTime?
  
  @@map("blockchain_transactions")
}
